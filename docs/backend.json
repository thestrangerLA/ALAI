{
  "entities": {
    "Idea": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Idea",
      "type": "object",
      "description": "Represents an idea generated and refined within the application.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the idea."
        },
        "userId": {
          "type": "string",
          "description": "Reference to the User who created the idea. (Relationship: User 1:N Idea)"
        },
        "initialConcept": {
          "type": "string",
          "description": "The user's initial idea or concept input."
        },
        "expandedIdea": {
          "type": "string",
          "description": "The expanded idea generated by the AI, with added details and potential applications."
        },
        "refinementDetails": {
          "type": "string",
          "description": "Details of the refinement adjustments made by the user (level of detail, focus area, target audience, etc.)."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the idea was initially created.",
          "format": "date-time"
        },
        "updatedAt": {
          "type": "string",
          "description": "Timestamp indicating when the idea was last updated.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "userId",
        "initialConcept",
        "expandedIdea",
        "createdAt",
        "updatedAt"
      ]
    },
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the application. Does NOT contain authentication system data (e.g., passwords).",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the user."
        },
        "email": {
          "type": "string",
          "description": "The user's email address.",
          "format": "email"
        },
        "name": {
          "type": "string",
          "description": "The user's full name."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp indicating when the user account was created.",
          "format": "date-time"
        }
      },
      "required": [
        "id",
        "email",
        "name",
        "createdAt"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user profile information.  Accessed via path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/ideas/{ideaId}",
        "definition": {
          "entityName": "Idea",
          "schema": {
            "$ref": "#/backend/entities/Idea"
          },
          "description": "Stores ideas created by the user. Accessed via path-based ownership.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who owns the idea."
            },
            {
              "name": "ideaId",
              "description": "The unique identifier of the idea."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore data structure is designed to support the Idea Spark application, focusing on security, scalability, and debuggability, especially concerning authorization. It leverages denormalization to ensure Authorization Independence and supports the required QAPs.\n\nIdeas are stored under a path-based ownership model `/users/{userId}/ideas/{ideaId}`. This approach inherently secures ideas to their respective owners without needing complex rules or `get()` calls.  The structure facilitates simple list operations (QAPs) as each user's ideas are segregated under their respective user ID, effectively filtering at the path level. The `userId` field within the `Idea` document is redundant given the path structure, but included for data consistency (helps with data migrations and more complex queries, if needed in the future).\n\nUsers are stored in a top-level `/users` collection. While the application doesn't seem to have a concept of global roles right now, the structure is extensible, allowing for the introduction of role-based access control in the future if needed."
  }
}